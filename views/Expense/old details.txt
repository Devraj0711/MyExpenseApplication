<!DOCTYPE html>
<html lang="en">

<head>
    <title id="pageTitle">Add Expense</title>
    </head>

<body>
    <form class="product-form" id="myExpense"  >
        <div class="form-control">
            <label for="Amount">Enter Expense Amount:</label>
            <input type="number" id="Amount" name="Amount" required>
        
            <label for="description">Choose Description:</label>
            <textarea name="description" id="description" rows="5"></textarea>
       
            <label for="Category">Choose a Category:</label>
            <select name="Category" id="Category">
                <option value="movie">Movie</option>
                <option value="fuel">Fuel</option>
                <option value="food">Food</option>
                <option value="shopping">Shopping</option>
            </select>

        <button id="fetchExpensesButton" class="btn" type="submit">Add Expense</button>
        </div>
        <div id="error-message"></div>
        <div>
            <ul id="listOfExpenses"></ul>
        </div>
    </form>

    <!-- attaching a paytem portal to the application -->
    <button id="rzp-button1">Buy Premimum</button>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    
        <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.4.1/axios.min.js"
            integrity="sha512-Fh/JL4KFgbH0OFN4EMEOvk90MTCjVuTVGFRDc+Kh5PyUFOzSzn/KA6PTOSNywfm5Ruppr40Uj09oGuj5tn6jiQ=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    
        <script>
            document.addEventListener('DOMContentLoaded', () => {

            
            const myExpense = document.querySelector('#myExpense');
            const listOfExpenses = document.getElementById('listOfExpenses');
            const errorMessageElement = document.getElementById('error-message');
            const token= localStorage.getItem('token');  
             
            
            
            // creating a response when the screen is reloaded.
            var expensesData = <%- expense %>;
            // var ans_value= <%- ansValue %>;
            console.log("------" , expensesData);

            console.log("tokkkkk  ", token);
            if(expensesData.length>0)
            {
            expensesData.forEach(expense => {
                
                const childElement1 = document.createElement('li');
                childElement1.textContent = expense.Amount + ' - ' + expense.description + ' - ' + expense.Category;
                const deleteButton = document.createElement('button');
                deleteButton.className = 'btn btn-danger btn-sm float-right delete';
                deleteButton.appendChild(document.createTextNode('Delete Expense'));
                const editButton = document.createElement('button');
                editButton.className = 'btn btn-primary btn-sm float-right edit';
                editButton.appendChild(document.createTextNode('Edit'));
                childElement1.appendChild(editButton);
                childElement1.appendChild(deleteButton);
                listOfExpenses.appendChild(childElement1);
            })
        } //end of if statement


            myExpense.addEventListener('submit', onSubmit);
            
            //start of onsubmit function which will be called when the Add button is clicked
            function onSubmit(event) {
                event.preventDefault();

                const expenseDetails = {
                    Amount: document.getElementById('Amount').value,
                    description: document.getElementById('description').value,
                    Category: document.getElementById('Category').value
                };
                const token= localStorage.getItem('token'); 
                console.log(token);
                const config = {
                    headers: {
                          'Authorization': `Bearer ${token}`// Include the token in the Authorization header
                            }
                        };
                console.log(config);

                //post call to the server returning 200 success
                axios.post('http://16.171.29.86:2000/Expense/details', expenseDetails, config)
                    .then(response => {
                        if (response.data.success) {
                            console.log(response.data.expense);
                            showOnScreen(response.data.expense);
                        } else {
                            console.error('Error fetching data: ', response.data.error);
                            showError(response.data.error);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showError(error);
                    });
            }

            // function to show the values as list on the screen
            function showOnScreen(myobj) {
                console.log('Received data from server:', myobj);
                const childElement = document.createElement('li');
                childElement.textContent = myobj.Amount + ' - ' + myobj.description + ' - ' + myobj.Category;
                const deleteButton = document.createElement('button');
                deleteButton.className = 'btn btn-danger btn-sm float-right delete';
                deleteButton.appendChild(document.createTextNode('Delete Expense'));
                const editButton = document.createElement('button');
                editButton.className = 'btn btn-primary btn-sm float-right edit';
                editButton.appendChild(document.createTextNode('Edit'));
                childElement.appendChild(editButton);
                childElement.appendChild(deleteButton);
                listOfExpenses.appendChild(childElement);

                
            }


            // function used to show error on the screen
            function showError(error)
                {
                    // Assuming there's an element with ID 'error-message' in HTML
                    const errorMessageElement = document.getElementById('error-message');
                    try {
                        const errorMessage = JSON.parse(error.response.data.error);
                        if (errorMessageElement) {
                            errorMessageElement.textContent = `An error occurred: ${errorMessage.message}`;
                        } 
                        else {
                            // If there's no specific element to display the error, log it to the console
                            console.error('An error occurred:', errorMessage.message);
                        }
                        }
                        catch (parseError) {
                            // If parsing the error JSON fails, display the original error response text
                            if (errorMessageElement) {
                                errorMessageElement.textContent = `An error occurred: ${error.response.data}`;
                            }
                            else {
                                console.error('An error occurred:', error.response.data);
                            }
                        }
                }

                //function for razorpay
                document.getElementById('rzp-button1').onclick = async function (e) {
                    const token = localStorage.getItem('token');
                    try {
                        const response = await axios.get('http://16.171.29.86:2000/premiummembership', {
                            headers: { "Authorization": token }
                        });
                        
                        const options = {
                            "key": response.data.key_id,
                            "order_id": response.data.order.id,
                            "handler": async function (response) {
                                try {
                                    const paymentResponse = await axios.post('http://16.171.29.86:2000/updatetransactionstatus', {
                                    order_id: options.order_id,
                                    payment_id: response.razorpay_payment_id,
                                }, {
                                    headers: { "Authorization": token }
                                });
                                if (paymentResponse.data.success) {
                                    alert('You are a Premium Member');
                                    document.body.innerHTML += '<div style="color:black;">You are a Premium Member </div>';
                                    // Perform additional actions if payment was successful
                                }
                                else {
                                    console.error('Payment failed:', paymentResponse.data.error);
                                    // Handle payment failure scenario
                                }
                            } 
                            catch (error) {
                                    console.error('Error updating transaction status:', error);
                                   // Handle error updating transaction status
                                }
                            }
                        };
                       
                        const razorpay = new Razorpay(options);
                        razorpay.on('payment.success', options.handler);
                        razorpay.on('payment.error', function (response) {
                        console.error(response.error.description);
                        // Handle payment failure here
                     });
                     razorpay.open();
                    }
                    catch (error) {
                        console.error('Error fetching RazorPay details:', error);
                        // Handle error fetching RazorPay details
                        }
                    };

                // document.getElementById('rzp-button1').onclick = async function (e)
                // {
                    
                //     const token= localStorage.getItem('token')
                //     const response = await axios.get ('http://16.171.29.86:2000/premiummembership', {headers: {"Authorization": token}});
                //     console.log(response);
                //     var options= 
                //     {
                //         "key": response.data.key_id, //key Id generated
                //         "order_id": response.data.order.id, //for one time payement
                //         "handler" : async function(response)
                //         {
                //             await axios.post('http://16.171.29.86:2000/updatetransactionstatus', {
                //                 order_id: options.order_id,
                //                 payment_id: response.razorpay_payment_id,
                //             }, {headers: {"Authorization": token}})
                //         alert('You are a Premium Member');    
                //         },
                //     };
                // }

            
            });  //  end of document add listener function

     </script>

</body> 

</html>